// <auto-generated />
using ColorMemory.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ColorMemory.Migrations
{
    [DbContext(typeof(GameDbContext))]
    partial class GameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ColorMemory.Data.Artwork", b =>
                {
                    b.Property<int>("ArtworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ArtworkId"));

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("S3JpgUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("S3JsonUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ArtworkId");

                    b.ToTable("Artworks");
                });

            modelBuilder.Entity("ColorMemory.Data.Player", b =>
                {
                    b.Property<string>("PlayerId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("ColorMemory.Data.PlayerArtwork", b =>
                {
                    b.Property<string>("PlayerId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ArtworkId")
                        .HasColumnType("int");

                    b.Property<bool>("HasIt")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("PlayerId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("PlayerArtworks");
                });

            modelBuilder.Entity("ColorMemory.Data.PlayerArtwork", b =>
                {
                    b.HasOne("ColorMemory.Data.Artwork", "Artwork")
                        .WithMany()
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ColorMemory.Data.Player", "Player")
                        .WithMany("PlayerArtworks")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ColorMemory.Data.Player", b =>
                {
                    b.Navigation("PlayerArtworks");
                });
#pragma warning restore 612, 618
        }
    }
}
